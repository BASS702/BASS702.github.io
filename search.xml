<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>NODE.JS简介</title>
    <url>/2021/04/06/NODE-JS%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>Node.js发布于2009年5月，由Ryan Dahl开发，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I/O模型，让JavaScript 运行在服务端的开发平台，它让JavaScript成为与PHP、Python、Perl、Ruby等服务端语言平起平坐的脚本语言。<br>Node.js对一些特殊用例进行优化，提供替代的API，使得V8在非浏览器环境下运行得更好，V8引擎执行Javascript的速度非常快，性能非常好，基于Chrome JavaScript运行时建立的平台， 用于方便地搭建响应速度快、易于扩展的网络应用。<br>V8引擎本身使用了一些最新的编译技术。这使得用Javascript这类脚本语言编写出来的代码运行速度获得了极大提升，又节省了开发成本。对性能的苛求是Node的一个关键因素。 Javascript是一个事件驱动语言，Node利用了这个优点，编写出可扩展性高的服务器。Node采用了一个称为“事件循环(event loop）”的架构，使得编写可扩展性高的服务器变得既容易又安全。提高服务器性能的技巧有多种多样。Node选择了一种既能提高性能，又能减低开发复杂度的架构。这是一个非常重要的特性。并发编程通常很复杂且布满地雷。Node绕过了这些，但仍提供很好的性能。<br>Node采用一系列“非阻塞”库来支持事件循环的方式。本质上就是为文件系统、数据库之类的资源提供接口。向文件系统发送一个请求时，无需等待硬盘（寻址并检索文件），硬盘准备好的时候非阻塞接口会通知Node。该模型以可扩展的方式简化了对慢资源的访问， 直观，易懂。尤其是对于熟悉onmouseover、onclick等DOM事件的用户，更有一种似曾相识的感觉。<br>虽然让Javascript运行于服务器端不是Node的独特之处，但却是其一强大功能。不得不承认，浏览器环境限制了我们选择编程语言的自由。任何服务器与日益复杂的浏览器客户端应用程序间共享代码的愿望只能通过Javascript来实现。虽然还存在其他一些支持Javascript在服务器端 运行的平台，但因为上述特性，Node发展迅猛，成为事实上的平台。<br>在Node启动的很短时间内，社区就已经贡献了大量的扩展库（模块）。其中很多是连接数据库或是其他软件的驱动，但还有很多是凭他们的实力制作出来的非常有用的软件。<br>最后，不得不提到的是Node社区。虽然Node项目还非常年轻，但很少看到对一个项目如此狂热的社区。不管是新手，还是专家，大家都围绕着项目，使用并贡献自己的能力，致力于打造一个探索、支持、分享、听取建议的乐土。</p>
]]></content>
      <tags>
        <tag>NODE.JS相关</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo的特点与优势</title>
    <url>/2021/04/07/hexo%E7%9A%84%E7%89%B9%E7%82%B9%E4%B8%8E%E4%BC%98%E5%8A%BF/</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。在安装,配置完成hexo之后，借助hexo，通过以下步骤，就可以完成一篇博客框架的搭建。</p>
<img src="/.com//04/07/hexo%E7%9A%84%E7%89%B9%E7%82%B9%E4%B8%8E%E4%BC%98%E5%8A%BF/A1.jpg" class title="This is an example image">
<p>但是从关于hexo init到hexo deploy中发生了什么，我们最需要了解的是hexo完成markdown到html的generate的两次模板渲染，第一次渲染模板输入source目录下的文件，用的是yml以及markdown模板引擎，输出一个大的article对象；第二次输入第一次的article对象以及themes目录下的文件，其中包含了我们需要的主题模板等个性化设置和html中需要加载的css, js, images，采用的是模板引擎由themes/ layouts下的具体参数决定，最终输出public目录下文件，里面包含了整个博客网站的html，css，js，images。<br>但实际上Hexo在工作时是先实现一套( 插件 )扩展系统，然后再往扩展系统中添加插件来实现自身的功能。即我们日常使用的hexo init, hexo new，hexo generate等等功能都是通过一个个插件实现。</p>
<img src="/.com//04/07/hexo%E7%9A%84%E7%89%B9%E7%82%B9%E4%B8%8E%E4%BC%98%E5%8A%BF/A2.jpg" class title="This is an example image">
<p>通过浏览器访问到的git page上的内容其实是hexo generate之后生成的public目录depoly后的内容。<br>Hexo的优势在哪里？比较流行的静态博客框架有Jekyll，Hexo，Simple，Octopress，Pelican以及Lo·gecho等等。这些静态程序可以说都有各自的好处，选择Hexo主要原因是：Jeky基于Ruby实现，安装Jeky需要搭建Ruby环境，相较于Windows，MAC系统更加兼容Ruby，Jekyll没有本地服务器，无法实现本地博文预览功能，需要上传到WEB容器中才能预览功能，而Hexo可以通过简单的命令实现本地的预览，并直接发布到WEB容器中实现同步。同时Hexo基于NodeJs实现，在Windows上安装NodeJs开发环境简单。</p>
]]></content>
  </entry>
</search>
